一.动态sql的使用：在查询信息列表的时候，以若干个关键字进行模糊查询的时候使用动态sql

二.在进行字符串的拼接的时候需要注意的事项：
    1.当字符串一开始用""修饰时，再使用需要使用''，反之亦然
    2.当一个字符串中重复出现''或者""，也就是''里面还有''，""里面还有""，需要使用"\"转义，否则无法识别
    3.当在字符串中加入变量，需要使用最外面包裹的''或者""(视情况而定)。公式："+变量+" 或 '+变量+'

三.vo对象：是从数据库向前段传递信息的时候使用，封装domain无法封装的信息

四.分页处理的业务流程：
    前端：
        1.pageList(pageNo[页数],pageSize[每页的条数])
        2.当条件查询的时候使用动态sql
        3.当需要分页操作的时候，调用pageList(1,2)方法
        4.接受data参数:{"total":total,"dataList":dataList}  dataList:[{活动对象1},{活动对象2},......]
        5.使用字符串将后端返回的信息拼接为前端的表格或者是其他的标签，每一个信息的id值为对象的id(唯一且不重复)
    后端：
        1.获取前端的参数
        2.使用Map集合将参数包装起来，当作参数传入到ActivityDao.xml文件中
        3.sql语句:
            (1)动态sql:
                <where>
                    <if test = "name != null and name != ''">
                        name like '%' #{name} '$'
                    </if>
                    <if test = "owner != null and owner != ''">
                        and owner like '%' #{owner} '%'
                    </if>
                    ......
                </where>
            (2)limit a,b:
                跳过前面a条记录，查询后面的b条记录
                例如：limit 0,3:查询1-3条记录  limit 3,4:查询4-7条记录
            (3)排序:
                order by xxx desc : 降序
                order by xxx asc : 升序
            (4)接收查询的信息可以使用Map和VO对象
            (5)一个功能中涉及到多个sql操作，分开在xml文件中操作，将返回的结果封装在一个VO对象
五.分页的条件查询的一个问题：
    当条件查询的时候，修改搜索框中的信息且未按钮搜索按钮，点击分页组件，会将新的信息当作查询条件来进行查询
    解决：一个隐藏域中保存搜索过后的信息，当触发pageList方法的时候，将搜索框中的内容改为隐藏域中的内容
    例如：
        $("#searchBtn").click(function () {
             /*
                 一个问题：当条件查询的时候，修改搜索框中的信息且未按钮搜索按钮，点击分页组件，会将新的信息当作查询条件来进行查询
                     解决：一个隐藏域中保存搜索过后的信息，当触发pageList方法的时候，将搜索框中的内容改为隐藏域中的内容
             * */
             $("#hidden-name").val($.trim($("#search-name").val()));
             $("#hidden-owner").val($.trim($("#search-owner").val()));
             $("#hidden-startTime").val($.trim($("#search-startTime").val()));
             $("#hidden-endTime").val($.trim($("#search-endTime").val()));
             pageList(1, 2);
        });

        function pageList(pageNo, pageSize) {
             //调用该方法的时候，将搜索框的内容替换为隐藏域中的内容
             $("#search-name").val($.trim($("#hidden-name").val()));
             $("#search-owner").val($.trim($("#hidden-owner").val()));
             $("#search-startTime").val($.trim($("#hidden-startTime").val()));
             $("#search-endTime").val($.trim($("#hidden-endTime").val()));

        <%--隐藏域--%>
             <input type="hidden" id="hidden-name"></input>
             <input type="hidden" id="hidden-owner"></input>
             <input type="hidden" id="hidden-startTime"></input>
             <input type="hidden" id="hidden-endTime"></input>

六.jQuery的标签选择器
    $("input[name=xxx]"):选中input标签中name属性为xxx的元素
    修改属性值的方法prop():
        语法：jQueryObject.prop(propertyName,value);
        案例：$("input[name=xxx]").prop("checked",true/false);
        设置或返回指定属性propertyName的值。如果指定了value参数，则表示设置属性propertyName的值为value；如果没有指定value参数，则表示返回属性propertyName的值。

七.全选框和单选框
    全选框选中所有单选框被选中：
        1.给单选框设置name属性(所有都一样的)
        2.$("全选框").click(function(){
            $("input[name=xxx]").prop("checked",this.checked);
        })

    一个单选框没选中就不选中全选框
        $("input[name=xxx]").click(function(){
            //单选框的数量等于单选框被选中的数量说明全部选中了
            $("全选框").prop("checked",$("input[name=xxx]").length == $("input[name=xxx]:checked").length);
        })

    注意：动态生成的元素不能直接以 $("动态生成的元素").事件名();的形式来绑定事件
            例如：单选框是动态生成的，以下的做法不正确：
                $("input[name=xxx]").click(function(){});
        语法：$("需要绑定事件的元素的最外层有效的元素[也就是最外层不是被动态生成的元素对象]").on("事件名",需要绑定事件的元素的jQuery对象,回调函数);
            例如：动态生成的单选框的最外层有效元素的id为"id1"
            $("#id1").on("click",$("input[name=xxx]"),function(){});

八.MyBatis的<foreach>标签
    使用规则：
        where id in
        <foreach  collection="array" open="(" close=")" item="id" separator=",">
        collection:集合的类型
        open:开始的标识
        close:结束的标识
        item:在sql语句中的替代词
        separator:每一个值之间的分隔符
        #{id}
        </foreach>
        解释为：where id in (id1,id2,...,idn);

九.信息列表以及分页组件的总结
    1.注意事项(一些细节部分)
        a.当我们点击市场活动时，在页面加载完毕后进行一个ajax请求，获取到活动信息列表
        b.查询条件使用动态sql
        c.模态窗口的开启和关闭
            $("模态窗口").modal("show");
            $("模态窗口").modal("hide");
        d.用户进行添加，修改，删除操作之后，分页组件应该维持用户原有的基础之上
            添加：页面跳转到第一页，每页展示的页数维持不变
            修改：页面和每页的条数都维持不变
            删除：页面跳转到第一页，每页的条数维持不变
        e.每次调用pageList()的时候，把全选框的钩去掉
        f.将搜索框中的内容保存在隐藏域中，当查询条件改变但是并没有点击查询按钮。再次刷新市场活动信息列表还是使用原来的查询条件


    2.分页插件以及实现的主要代码
        a.引入 jquery.bs_pagination.min.css jquery.bs_pagination.min.js jquery/bs_pagination/en.js 三个插件
            <link rel="stylesheet" type="text/css" href="jquery/bs_pagination/jquery.bs_pagination.min.css">
            <script type="text/javascript" src="jquery/bs_pagination/jquery.bs_pagination.min.js"></script>
            <script type="text/javascript" src="jquery/bs_pagination/en.js"></script>
            注意：这两个插件一定要在bootstrap_3.3.0的下面(现有BootStrap再有bs_pagination)
        b.编写pageList()函数
        c.分页操作的代码
             //处理完代码之后，实现分页操作
             $("#activityPage").bs_pagination({
                 currentPage: pageNo, // 页码
                 rowsPerPage: pageSize, // 每页显示的记录条数
                 maxRowsPerPage: 20, // 每页最多显示的记录条数
                 totalPages: totalPages, // 总页数
                 totalRows: data.total, // 总记录条数
                 visiblePageLinks: 3, // 显示几个卡片
                 showGoToPage: true,
                 showRowsPerPage: true,
                 showRowsInfo: true,
                 showRowsDefaultInfo: true,

                 //这个回调函数在点击分页组件时触发，不要动
                 //作用：向分页插件里
                 onChangePage: function (event, data) {
                     pageList(data.currentPage, data.rowsPerPage);
                 }
             })
        在列表下面导入分页组件div（将原有默认分页div去掉）设置id="activityPage"
        d.分页的函数名要为pageList,因为bootstrap中的关于分页的函数也是pageList
        e.点击分页组件的按钮，进行一次ajax的请求，保持原有的页数和每页展示的条数
            pageList($("#activityPage").bs_pagination('getOption', 'currentPage'),
            $("#activityPage").bs_pagination('getOption', 'rowsPerPage'));
            //$("#activityPage").bs_pagination('getOption', 'currentPage'):开始页为当前页
            //$("#activityPage").bs_pagination('getOption', 'rowsPerPage'):开始每页展示的条数为当前每页展示的条数
        f.全选操作
            $("全选框").click(function(){
                 $("input[name=fx]").prop("checked",this.checked);
            })
        g.一条复选框没选中，全选框钩就消失
            $("input[name=fx]").click(function(){
                //复选框的个数和复选框被选中的个数相同还是不相同
                $("全选框").prop("checked",$("#input[name=fx]").length == $("#input[name=fx]:checked").length);
            })

十.在字符串中拼接变量
    1.jsp页面中，需要在<script>标签对中使用EL表达式，需要在字符串中使用.  "${xxx}"
    2.动态生成的元素，给元素绑定事件需要使用onclick="function(){}"的形式，如果这个回调函数中需要传递参数，拼接这个参数需要在字符串中拼接。
        例如：'onclick = "delRemark(\''+n.id+'\')"'

十一.cache(缓存机制)解决数据字典存储的问题
    缓存(cache)：内存中的数据
        我们需要做的就是一个服务器的缓存的机制，就相当于要将数据保存到服务器的内存中。如果服务器处于开启状态，我们就一直能够从该缓存中获取数据。
        application(全局作用域，上下文作用域)
        在服务器的启动阶段，将数据保存到服务器缓存中，服务器启动阶段，数据始终存在。
        将数据保存到服务器的方法是:application.serAttribute();
        从服务器的缓存中获取数据的方法:application.getAttribute();

十二.数据字典
    数据字典指的是在应用程序中，做表单元素选择内容用的相关的数据
    下拉框，单选框，复选框

十三.将数据字典存储到服务器的缓存中
    使用ServletContextListener监听器
    public void contextInitialized(ServletContextEvent sce) 方法:在ServletContext对象创建的时候调用

十四.JSTL标签库
    1.在jsp中是用jstl标签库
        引入 <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
        例如：使用foreach标签：
            <c:forEach items="${applicationScope.appellation}" var="dic">
            	<option value="${dic.value}">${dic.text}</option>
            </c:forEach>

十五.对于jsp页面使用EL表达式
    1.需要过后台
        Controller中将后面jsp页面中需要的数据保存在request域中。jsp页面中可以直接使用EL表达式获取
    2.不需要过后台
        通过传统的请求方式将参数传送到另一个jsp页面中。jsp实际就是servlet
            例如：window.onload.href = "workbench/clue/conver.jsp?id=xxx&fullname=xxx&age=xxx"
                在jsp页面中使用EL表达式获取参数信息
                ${param.参数名}
        jsp的九大内置对象：
            request内置对象
            response内置对象
            page内置对象
            session内置对象
            application内置对象
            out内置对象
            exception内置对象
            config内置对象
            pageContext内置对象
        在java表达式中可以直接使用这九大内置对象，但是在jsp页面上不能直接使用，而要通过pageContext来获取
            例如:
                <%
                    String param1 = request.getParamter("xxx");
                %>
                Request request = pageContext.getRequest(); //获取请求作用域对象

十六.junit测试：单元测试
    单元测试在test包下。包结构和java包中的相似
    每一个模块创建一个测试类，命名规则：domain对象Test 例如：activityTest
    对于测试的功能，每一个功能就是一个方法：public void test+方法名(){}。在方法前面加上@Test，否则无法运行
    单元测试实际上是多线程的方式同时来运行每一个方法，每一个方法独立互不影响。可以观察返回值来判断功能是否正常使用
    也可以使用"断言"的方式
    Assert.assertEquals(Object exception,Object actual);

十七.request.getContextPath():获取项目名: "/项目名"

十八.解析properties文件
    ResourceBundle-->资源绑定器
    一般类似于key : value的类型的数据并且比较少，可以使用properties文件进行存储。需要使用的时候解析就好了。

十九.jsp页面中需要使用map或者其他java代码的数据信息，可以拼为json格式数据。json数据在js代码中可以使用
    注意：在拼接json的时候，形式如下：
        var json = {
            "<%=datakey%>" : <%=datavalue%>
            key需要放在""里面(规则)
        }
    在参数为可变的时候，获取json中的数据要使用json[]的形式，不能使用json. 的形式。例如：
        var stage = $("#create-stage").val();
        var value = json[stage];

二十.解析properties文件
    1.Properties类
    2.ResourceBundle rb = ResourceBundle.getBundle("文件名[不加.properties后缀名]");
        这种可以将properties的unicode编码转换为中文

二十一.请求转发和重定向的使用场景
    请求转发：
        无论有多少次业务处理，用户只需要发送一次请求
        页面的路径会保持用户发送请求的路径
            例如：
                "/workbench/clue/detail.do"使用请求转发到detail.jsp页面，浏览器的路径为"/workbench/clue/detail.do",而不是"detail.jsp"
        当需要request域对象保存数据到另一个jsp页面的时候，使用请求转发
    重定向：
        一次请求只能对应一个业务
        路径会跳转到新路径
